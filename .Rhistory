rm(list=ls())
#Clear Memory
gc(reset=TRUE)
#Set Working Directory
setwd("C:/Users/Eve/Dropbox/UCLA Files/Courses/418 Tools of Data Science/HW4")
library(readr)
library(glmnet)
library(ROCR)
d <- read_csv("test.csv")
set.seed(123)
N <- nrow(d)
idx <- sample(1:N, 0.6*N)
d_train <- d[idx,]
d_test <- d[-idx,]
X <- Matrix::sparse.model.matrix(y ~ . - 1, data = d)
X_train <- X[idx,]
X_test <- X[-idx,]
system.time({
md_LR_reg <- glmnet( X_train, d_train$y, lambda = 0, alpha = 1, family = "binomial")
})
phat <- predict(md_LR_reg, newx = X_test, type = "response")
LR_reg_pred <- prediction(phat, d_test$y)
LR_reg_auc <- performance(LR_reg_pred, "auc")@y.values[[1]]
LR_reg_auc
rm(list=ls())
#Clear Memory
gc(reset=TRUE)
#Set Working Directory
setwd("C:/Users/Eve/Dropbox/UCLA Files/Courses/418 Tools of Data Science/HW4")
library(e1071)
set.seed(123)
d <- read_csv("test.csv")
set.seed(123)
N <- 5000
idx <- sample(1:N, 0.6*N)
d_train <- d[idx,]
d_test <- d[setdiff(1:N,idx),]
X <- Matrix::sparse.model.matrix(y ~ . - 1, data = d)
X_train <- X[idx,]
X_test <- X[setdiff(1:N,idx),]
system.time({
md <- svm(x = X_train, y = as.factor(d_train$y),
kernel = "radial", gamma = 0.1, cost = 1,
probability = TRUE)
})
system.time({
md <- svm(x = X_train, y = as.factor(d_train$y),
kernel = "radial", gamma = 0.1, cost = 1,
probability = TRUE)
})
d_train <- d[idx,]
d_test <- d[setdiff(1:N,idx),]
X <- Matrix::sparse.model.matrix(y ~ . - 1, data = d)
X
X_train <- X[idx,]
X_test <- X[setdiff(1:N,idx),]
system.time({
md <- svm(x = X_train, y = as.factor(d_train$y),
kernel = "radial", gamma = 0.1, cost = 1,
probability = TRUE)
})
install.packages("SparseM")
library(SparseM)
system.time({
md <- svm(x = X_train, y = as.factor(d_train$y),
kernel = "radial", gamma = 0.1, cost = 1,
probability = TRUE)
})
phat <- attr(predict(md, newdata = X_test, probability = TRUE), "probabilities")[,"Y"]
rocr_pred <- prediction(phat, d_test$y)
performance(rocr_pred, "auc")@y.values[[1]]
library(h2o)
h2o.init(nthreads=-1)
dx <- h2o.importFile("test.csv")
dx_split <- h2o.splitFrame(dx, ratios = c(0.6,0.2), seed = 123)
dx_train <- dx_split[[1]]
dx_valid <- dx_split[[2]]
dx_test <- dx_split[[3]]
Xnames <- names(dx_train)[which(names(dx_train)!="y")]
system.time({
md1 <- h2o.deeplearning(x = Xnames, y = "y", training_frame = dx_train, validation_frame = dx_valid,
## DEFAULT: activation = "Rectifier", hidden = c(200,200),
epochs = 100, stopping_rounds = 2, stopping_metric = "AUC", stopping_tolerance = 0)
})
h2o.performance(md1, dx_test)@metrics$AUC
library(h2o)
h2o.init(nthreads=-1)
dx <- h2o.importFile("test.csv")
dx_split <- h2o.splitFrame(dx, ratios = c(0.6,0.2), seed = 123)
dx_train <- dx_split[[1]]
dx_valid <- dx_split[[2]]
dx_test <- dx_split[[3]]
Xnames <- names(dx_train)[which(names(dx_train)!="y")]
hyper_params <- list( ntrees = 10000,  ## early stopping
max_depth = 5:15,
min_rows = c(1,3,10,30,100),
learn_rate = c(0.01,0.03,0.1),
learn_rate_annealing = c(0.99,0.995,1,1),
sample_rate = c(0.4,0.7,1,1),
col_sample_rate = c(0.7,1,1),
nbins = c(30,100,300),
nbins_cats = c(64,256,1024)
)
